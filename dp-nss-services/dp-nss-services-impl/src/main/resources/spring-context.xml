<beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xmlns:context="http://www.springframework.org/schema/context"
       xmlns:tx="http://www.springframework.org/schema/tx"
       xmlns:batch="http://www.springframework.org/schema/batch"
       xsi:schemaLocation="http://www.springframework.org/schema/beans
        http://www.springframework.org/schema/beans/spring-beans.xsd
        http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context.xsd
        http://www.springframework.org/schema/tx http://www.springframework.org/schema/tx/spring-tx.xsd
        http://www.springframework.org/schema/batch http://www.springframework.org/schema/batch/spring-batch-3.0.xsd">

    <context:component-scan base-package="cz.cvut.dp.nss.services"/>
    <context:component-scan base-package="cz.cvut.dp.nss.persistence"/>
    <context:component-scan base-package="cz.cvut.dp.nss.context"/>
    <context:component-scan base-package="cz.cvut.dp.nss.batch"/>

    <tx:annotation-driven transaction-manager="transactionManager" />

    <context:property-placeholder location="classpath:dp-nssLocal.properties" />

    <bean id="dataSource" class="org.apache.commons.dbcp.BasicDataSource" destroy-method="close">
        <property name="driverClassName" value="${jdbc.driver}" />
        <property name="url" value="${jdbc.url}" />
        <property name="username" value="${jdbc.username}" />
        <property name="password" value="${jdbc.password}" />
        <property name="maxIdle" value="10" />
        <property name="maxActive" value="20" />
        <property name="poolPreparedStatements" value="true" />
    </bean>

    <bean id="sessionFactory" class="org.springframework.orm.hibernate5.LocalSessionFactoryBean">
        <property name="dataSource" ref="dataSource" />
        <property name="packagesToScan" value="cz.cvut.dp.nss.services"/>

        <property name="hibernateProperties">
            <map>
                <entry key="hibernate.dialect" value="${hibernate.dialect}"/>
                <entry key="hibernate.show_sql" value="${hibernate.showSql}"/>
                <entry key="hibernate.format_sql" value="${hibernate.formatSql}"/>
                <entry key="hibernate.hbm2ddl.auto" value="${hibernate.auto}"/>
                <entry key="hibernate.current_session_context_class" value="org.springframework.orm.hibernate5.SpringSessionContext"/>

                <entry key="hibernate.multiTenancy" value="SCHEMA"/>
                <entry key="hibernate.tenant_identifier_resolver" value-ref="currentTenantResolverImpl"/>
                <entry key="hibernate.multi_tenant_connection_provider" value-ref="schemaPerTenantConnectionProvider"/>
            </map>
        </property>
    </bean>

    <bean id="transactionManager" class="org.springframework.orm.hibernate5.HibernateTransactionManager">
        <property name="autodetectDataSource" value="false"/>
        <property name="sessionFactory" ref="sessionFactory" />
    </bean>





    <bean id="jobRepository" class="org.springframework.batch.core.repository.support.MapJobRepositoryFactoryBean">
        <property name="transactionManager" ref="transactionManager" />
        <!-- toto je velmi dulezite, default by (u postgre) mel byt READ_COMMITED coz je dle dokumentace OK -->
        <!-- viz http://docs.spring.io/spring-batch/reference/html/configureJob.html#txConfigForJobRepository -->
        <property name="isolationLevelForCreate" value="ISOLATION_DEFAULT"/>
    </bean>

    <bean id="jobLauncher" class="org.springframework.batch.core.launch.support.SimpleJobLauncher">
        <property name="jobRepository" ref="jobRepository" />
    </bean>

    <batch:job id="gtfsImportBatchJob">
        <batch:step id="step1" next="step2">
            <batch:tasklet>
                <batch:chunk reader="agencyBatchReader" processor="agencyBatchProcessor" writer="agencyBatchWriter" commit-interval="10" />
            </batch:tasklet>
        </batch:step>
        <batch:step id="step2" next="step3">
            <batch:tasklet>
                <batch:chunk reader="routeBatchReader" processor="routeBatchProcessor" writer="routeBatchWriter" commit-interval="50" />
            </batch:tasklet>
        </batch:step>
        <batch:step id="step3" next="step4">
            <batch:tasklet>
                <batch:chunk reader="calendarBatchReader" processor="calendarBatchProcessor" writer="calendarBatchWriter" commit-interval="10" />
            </batch:tasklet>
        </batch:step>
        <batch:step id="step4" next="step5">
            <batch:tasklet>
                <batch:chunk reader="calendarDateBatchReader" processor="calendarDateBatchProcessor" writer="calendarDateBatchWriter" commit-interval="50" />
            </batch:tasklet>
        </batch:step>
        <batch:step id="step5" next="step6">
            <batch:tasklet>
                <batch:chunk reader="stopBatchReader" processor="stopParentBatchProcessor" writer="stopBatchWriter" commit-interval="100" />
            </batch:tasklet>
        </batch:step>
        <batch:step id="step6" next="step7">
            <batch:tasklet>
                <batch:chunk reader="stopBatchReader" processor="stopChildBatchProcessor" writer="stopBatchWriter" commit-interval="100" />
            </batch:tasklet>
        </batch:step>
        <batch:step id="step7" next="step8">
            <batch:tasklet>
                <batch:chunk reader="shapeBatchReader" processor="shapeBatchProcessor" writer="shapeBatchWriter" commit-interval="150" />
            </batch:tasklet>
        </batch:step>
        <batch:step id="step8" next="step9">
            <batch:tasklet>
                <batch:chunk reader="tripBatchReader" processor="tripBatchProcessor" writer="tripBatchWriter" commit-interval="150" />
            </batch:tasklet>
        </batch:step>
        <batch:step id="step9">
            <batch:tasklet>
                <batch:chunk reader="stopTimeBatchReader" processor="stopTimeBatchProcessor" writer="stopTimeBatchWriter" commit-interval="150" />
            </batch:tasklet>
        </batch:step>

    </batch:job>

    <bean id="agencyBatchReader" class="cz.cvut.dp.nss.batch.agency.AgencyBatchReader" scope="step">

        <!-- csv soubor k importu -->
        <property name="resource" value="#{jobParameters['agencyLocation']}" />

        <!-- preskoc zahlavi -->
        <property name="linesToSkip" value="1"/>

        <!-- mapovani radku csv-->
        <property name="lineMapper">
            <bean class="org.springframework.batch.item.file.mapping.DefaultLineMapper">
                <!-- rozseknuti hodnot radku-->
                <property name="lineTokenizer">
                    <bean class="org.springframework.batch.item.file.transform.DelimitedLineTokenizer">
                        <property name="names" value="id,name,url,timezone,lang,phone" />
                        <property name="delimiter" value=","/>
                    </bean>
                </property>
                <!-- do processoru budeme posilat DefaultFieldSet kde se budeme do mapy dotazovat na property -->
                <property name="fieldSetMapper">
                    <bean class="org.springframework.batch.item.file.mapping.PassThroughFieldSetMapper" />
                </property>
            </bean>
        </property>
    </bean>

    <bean id="routeBatchReader" class="cz.cvut.dp.nss.batch.route.RouteBatchReader" scope="step">

        <!-- csv soubor k importu -->
        <property name="resource" value="#{jobParameters['routesLocation']}" />

        <!-- preskoc zahlavi -->
        <property name="linesToSkip" value="1"/>

        <!-- mapovani radku csv-->
        <property name="lineMapper">
            <bean class="org.springframework.batch.item.file.mapping.DefaultLineMapper">
                <!-- rozseknuti hodnot radku-->
                <property name="lineTokenizer">
                    <bean class="org.springframework.batch.item.file.transform.DelimitedLineTokenizer">
                        <property name="names" value="id,agencyId,shortName,longName,type,color" />
                        <property name="delimiter" value=","/>
                    </bean>
                </property>
                <!-- do processoru budeme posilat DefaultFieldSet kde se budeme do mapy dotazovat na property -->
                <property name="fieldSetMapper">
                    <bean class="org.springframework.batch.item.file.mapping.PassThroughFieldSetMapper" />
                </property>
            </bean>
        </property>
    </bean>

    <bean id="calendarBatchReader" class="cz.cvut.dp.nss.batch.calendar.CalendarBatchReader" scope="step">

        <!-- csv soubor k importu -->
        <property name="resource" value="#{jobParameters['calendarLocation']}" />

        <!-- preskoc zahlavi -->
        <property name="linesToSkip" value="1"/>

        <!-- mapovani radku csv-->
        <property name="lineMapper">
            <bean class="org.springframework.batch.item.file.mapping.DefaultLineMapper">
                <!-- rozseknuti hodnot radku-->
                <property name="lineTokenizer">
                    <bean class="org.springframework.batch.item.file.transform.DelimitedLineTokenizer">
                        <property name="names" value="id,monday,tuesday,wednesday,thursday,friday,saturday,sunday,startDate,endDate" />
                        <property name="delimiter" value=","/>
                    </bean>
                </property>
                <!-- do processoru budeme posilat DefaultFieldSet kde se budeme do mapy dotazovat na property -->
                <property name="fieldSetMapper">
                    <bean class="org.springframework.batch.item.file.mapping.PassThroughFieldSetMapper" />
                </property>
            </bean>
        </property>
    </bean>

    <bean id="calendarDateBatchReader" class="cz.cvut.dp.nss.batch.calendarDate.CalendarDateBatchReader" scope="step">

        <!-- csv soubor k importu -->
        <property name="resource" value="#{jobParameters['calendarDateLocation']}" />

        <!-- preskoc zahlavi -->
        <property name="linesToSkip" value="1"/>

        <!-- mapovani radku csv-->
        <property name="lineMapper">
            <bean class="org.springframework.batch.item.file.mapping.DefaultLineMapper">
                <!-- rozseknuti hodnot radku-->
                <property name="lineTokenizer">
                    <bean class="org.springframework.batch.item.file.transform.DelimitedLineTokenizer">
                        <property name="names" value="calendarId,date,exceptionType" />
                        <property name="delimiter" value=","/>
                    </bean>
                </property>
                <!-- do processoru budeme posilat DefaultFieldSet kde se budeme do mapy dotazovat na property -->
                <property name="fieldSetMapper">
                    <bean class="org.springframework.batch.item.file.mapping.PassThroughFieldSetMapper" />
                </property>
            </bean>
        </property>
    </bean>

    <bean id="shapeBatchReader" class="cz.cvut.dp.nss.batch.shape.ShapeBatchReader" scope="step">

        <!-- csv soubor k importu -->
        <property name="resource" value="#{jobParameters['shapesLocation']}" />

        <!-- preskoc zahlavi -->
        <property name="linesToSkip" value="1"/>

        <!-- mapovani radku csv-->
        <property name="lineMapper">
            <bean class="org.springframework.batch.item.file.mapping.DefaultLineMapper">
                <!-- rozseknuti hodnot radku-->
                <property name="lineTokenizer">
                    <bean class="org.springframework.batch.item.file.transform.DelimitedLineTokenizer">
                        <property name="names" value="id,lat,lon,sequence" />
                        <property name="delimiter" value=","/>
                    </bean>
                </property>
                <!-- do processoru budeme posilat DefaultFieldSet kde se budeme do mapy dotazovat na property -->
                <property name="fieldSetMapper">
                    <bean class="org.springframework.batch.item.file.mapping.PassThroughFieldSetMapper" />
                </property>
            </bean>
        </property>
    </bean>

    <bean id="stopBatchReader" class="cz.cvut.dp.nss.batch.stop.StopBatchReader" scope="step">

        <!-- csv soubor k importu -->
        <property name="resource" value="#{jobParameters['stopsLocation']}" />

        <!-- preskoc zahlavi -->
        <property name="linesToSkip" value="1"/>

        <!-- mapovani radku csv-->
        <property name="lineMapper">
            <bean class="org.springframework.batch.item.file.mapping.DefaultLineMapper">
                <!-- rozseknuti hodnot radku-->
                <property name="lineTokenizer">
                    <bean class="org.springframework.batch.item.file.transform.DelimitedLineTokenizer">
                        <property name="names" value="id,name,lat,lon,locationType,parentId" />
                        <property name="delimiter" value=","/>
                    </bean>
                </property>
                <!-- do processoru budeme posilat DefaultFieldSet kde se budeme do mapy dotazovat na property -->
                <property name="fieldSetMapper">
                    <bean class="org.springframework.batch.item.file.mapping.PassThroughFieldSetMapper" />
                </property>
            </bean>
        </property>
    </bean>

    <bean id="tripBatchReader" class="cz.cvut.dp.nss.batch.trip.TripBatchReader" scope="step">

        <!-- csv soubor k importu -->
        <property name="resource" value="#{jobParameters['tripsLocation']}" />

        <!-- preskoc zahlavi -->
        <property name="linesToSkip" value="1"/>

        <!-- mapovani radku csv-->
        <property name="lineMapper">
            <bean class="org.springframework.batch.item.file.mapping.DefaultLineMapper">
                <!-- rozseknuti hodnot radku-->
                <property name="lineTokenizer">
                    <bean class="org.springframework.batch.item.file.transform.DelimitedLineTokenizer">
                        <property name="names" value="routeId,calendarId,id,headSign,shapeId" />
                        <property name="delimiter" value=","/>
                    </bean>
                </property>
                <!-- do processoru budeme posilat DefaultFieldSet kde se budeme do mapy dotazovat na property -->
                <property name="fieldSetMapper">
                    <bean class="org.springframework.batch.item.file.mapping.PassThroughFieldSetMapper" />
                </property>
            </bean>
        </property>
    </bean>

    <bean id="stopTimeBatchReader" class="cz.cvut.dp.nss.batch.stopTime.StopTimeBatchReader" scope="step">

        <!-- csv soubor k importu -->
        <property name="resource" value="#{jobParameters['stopTimesLocation']}" />

        <!-- preskoc zahlavi -->
        <property name="linesToSkip" value="1"/>

        <!-- mapovani radku csv-->
        <property name="lineMapper">
            <bean class="org.springframework.batch.item.file.mapping.DefaultLineMapper">
                <!-- rozseknuti hodnot radku-->
                <property name="lineTokenizer">
                    <bean class="org.springframework.batch.item.file.transform.DelimitedLineTokenizer">
                        <property name="names" value="tripId,arrivalTime,departureTime,stopId,sequence" />
                        <property name="delimiter" value=","/>
                    </bean>
                </property>
                <!-- do processoru budeme posilat DefaultFieldSet kde se budeme do mapy dotazovat na property -->
                <property name="fieldSetMapper">
                    <bean class="org.springframework.batch.item.file.mapping.PassThroughFieldSetMapper" />
                </property>
            </bean>
        </property>
    </bean>

</beans>